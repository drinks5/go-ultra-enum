// Code generated by go-ultra-enum; DO NOT EDIT.
package parser

import (
	"encoding/json"
	"fmt"
)

type colorEnum struct {
	Red   colorEle
	Blue  colorEle
	Grenn colorEle
}

func (x *colorEnum) Names() []string {
	return []string{
		"Red",
		"Blue",
		"Grenn",
	}
}
func (x *colorEnum) Values() []int {
	return []int{
		1,
		2,
		3,
	}
}
func (x *colorEnum) UnMarshalName(name string) (*colorEle, error) {
	if val, ok := colorEnumNameMap[name]; ok {
		return val, nil
	}
	return nil, fmt.Errorf("%s does not belong to names", name)
}
func (x *colorEnum) UnMarshalValue(value int) (*colorEle, error) {
	if val, ok := colorEnumValueMap[value]; ok {
		return val, nil
	}
	return nil, fmt.Errorf("%v does not belong to values", value)
}

type colorEle struct {
	Name        string
	Value       int
	Description string
}

func (x *colorEle) MarshalJson() ([]byte, error) {
	return json.Marshal(x)
}

var (
	Color = colorEnum{
		Red:   colorEle{Name: "Red", Value: 1, Description: ""},
		Blue:  colorEle{Name: "Blue", Value: 2, Description: ""},
		Grenn: colorEle{Name: "Grenn", Value: 3, Description: ""},
	}
	colorEnumNameMap = map[string]*colorEle{
		"Red":   &Color.Red,
		"Blue":  &Color.Blue,
		"Grenn": &Color.Grenn,
	}
	colorEnumValueMap = map[int]*colorEle{
		1: &Color.Red,
		2: &Color.Blue,
		3: &Color.Grenn,
	}
)

type countryEnum struct {
	China    countryEle
	America  countryEle
	Sinapore countryEle
}

func (x *countryEnum) Names() []string {
	return []string{
		"China",
		"America",
		"Sinapore",
	}
}
func (x *countryEnum) Values() []int64 {
	return []int64{
		1,
		2,
		3,
	}
}
func (x *countryEnum) UnMarshalName(name string) (*countryEle, error) {
	if val, ok := countryEnumNameMap[name]; ok {
		return val, nil
	}
	return nil, fmt.Errorf("%s does not belong to names", name)
}
func (x *countryEnum) UnMarshalValue(value int64) (*countryEle, error) {
	if val, ok := countryEnumValueMap[value]; ok {
		return val, nil
	}
	return nil, fmt.Errorf("%v does not belong to values", value)
}

type countryEle struct {
	Name        string
	Value       int64
	Description string
}

func (x *countryEle) MarshalJson() ([]byte, error) {
	return json.Marshal(x)
}

var (
	Country = countryEnum{
		China:    countryEle{Name: "China", Value: 1, Description: ""},
		America:  countryEle{Name: "America", Value: 2, Description: ""},
		Sinapore: countryEle{Name: "Sinapore", Value: 3, Description: ""},
	}
	countryEnumNameMap = map[string]*countryEle{
		"China":    &Country.China,
		"America":  &Country.America,
		"Sinapore": &Country.Sinapore,
	}
	countryEnumValueMap = map[int64]*countryEle{
		1: &Country.China,
		2: &Country.America,
		3: &Country.Sinapore,
	}
)

type statusEnum struct {
	On  statusEle
	Off statusEle
}

func (x *statusEnum) Names() []string {
	return []string{
		"On",
		"Off",
	}
}
func (x *statusEnum) Values() []bool {
	return []bool{
		true,
		false,
	}
}
func (x *statusEnum) UnMarshalName(name string) (*statusEle, error) {
	if val, ok := statusEnumNameMap[name]; ok {
		return val, nil
	}
	return nil, fmt.Errorf("%s does not belong to names", name)
}
func (x *statusEnum) UnMarshalValue(value bool) (*statusEle, error) {
	if val, ok := statusEnumValueMap[value]; ok {
		return val, nil
	}
	return nil, fmt.Errorf("%v does not belong to values", value)
}

type statusEle struct {
	Name        string
	Value       bool
	Description string
}

func (x *statusEle) MarshalJson() ([]byte, error) {
	return json.Marshal(x)
}

var (
	Status = statusEnum{
		On:  statusEle{Name: "On", Value: true, Description: ""},
		Off: statusEle{Name: "Off", Value: false, Description: ""},
	}
	statusEnumNameMap = map[string]*statusEle{
		"On":  &Status.On,
		"Off": &Status.Off,
	}
	statusEnumValueMap = map[bool]*statusEle{
		true:  &Status.On,
		false: &Status.Off,
	}
)

type sushiEnum struct {
	Maki    sushiEle
	Temaki  sushiEle
	Sashimi sushiEle
}

func (x *sushiEnum) Names() []string {
	return []string{
		"Maki",
		"Temaki",
		"Sashimi",
	}
}
func (x *sushiEnum) Values() []string {
	return []string{
		"MAKI",
		"TEMAKI",
		"SASHIMI",
	}
}
func (x *sushiEnum) UnMarshalName(name string) (*sushiEle, error) {
	if val, ok := sushiEnumNameMap[name]; ok {
		return val, nil
	}
	return nil, fmt.Errorf("%s does not belong to names", name)
}
func (x *sushiEnum) UnMarshalValue(value string) (*sushiEle, error) {
	if val, ok := sushiEnumValueMap[value]; ok {
		return val, nil
	}
	return nil, fmt.Errorf("%v does not belong to values", value)
}

type sushiEle struct {
	Name        string
	Value       string
	Description string
}

func (x *sushiEle) MarshalJson() ([]byte, error) {
	return json.Marshal(x)
}

var (
	Sushi = sushiEnum{
		Maki:    sushiEle{Name: "Maki", Value: "MAKI", Description: "Rice and filling wrapped in seaweed"},
		Temaki:  sushiEle{Name: "Temaki", Value: "TEMAKI", Description: "Hand rolled into a cone shape"},
		Sashimi: sushiEle{Name: "Sashimi", Value: "SASHIMI", Description: "Fish or shellfish served alone without rice"},
	}
	sushiEnumNameMap = map[string]*sushiEle{
		"Maki":    &Sushi.Maki,
		"Temaki":  &Sushi.Temaki,
		"Sashimi": &Sushi.Sashimi,
	}
	sushiEnumValueMap = map[string]*sushiEle{
		"MAKI":    &Sushi.Maki,
		"TEMAKI":  &Sushi.Temaki,
		"SASHIMI": &Sushi.Sashimi,
	}
)
